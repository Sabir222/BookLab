======= Start of ./docker-compose.dev.yml =======
# docker-compose.dev.yml
services:
  postgres:
    image: postgres:16-alpine
    container_name: turbo-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: sabir
      POSTGRES_PASSWORD: pw
      POSTGRES_DB: booklab_db
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - turbo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sabir -d booklab_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  redis:
    image: redis:7-alpine
    container_name: turbo-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass redispw --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - turbo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
      target: development
      # Removed args: section for development
    container_name: turbo-server-dev
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - NODE_ENV=development
      - HOST=0.0.0.0
      - SCHEME=http
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001,http://localhost:4000
      - SESSION_SECRET=1f3fd74888c842f58d507322785a4861
      - JWT_SECRET=fJq86HD1s7FlTEMd3O85AuIWL1fdrhziD6q5xvEd7fs=
      - JWT_REFRESH_SECRET=DCqJ9pZa75Tz+DT3AJV+Ffcl/5ZvJ/59Ns2Lanjj3cQ=
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=sabir
      - DB_PASSWORD=pw
      - DB_NAME=booklab_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispw
      - REDIS_DB=0
    volumes:
      - .:/app:cached
      - server_node_modules:/app/apps/server/node_modules
      - node_modules:/app/node_modules
    networks:
      - turbo-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
      # Removed args: section for development
    container_name: turbo-web-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - .:/app:cached
      - web_node_modules:/app/apps/web/node_modules
      - node_modules:/app/node_modules
      - /app/apps/web/.next
    networks:
      - turbo-network
    depends_on:
      - server
  docs:
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
      target: development
      # Removed args: section for development
    container_name: turbo-docs-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - .:/app:cached
      - docs_node_modules:/app/apps/docs/node_modules
      - node_modules:/app/node_modules
      - /app/apps/docs/.next
    networks:
      - turbo-network
volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  node_modules:
    driver: local
  server_node_modules:
    driver: local
  web_node_modules:
    driver: local
  docs_node_modules:
    driver: local
networks:
  turbo-network:
    driver: bridge

======= End of ./docker-compose.dev.yml =======

======= Start of ./apps/web/Dockerfile =======
FROM oven/bun:1.1.38-alpine AS base_image
FROM base_image AS deps
WORKDIR /app
COPY package.json bun.lock ./
COPY turbo.json ./
COPY apps/web/package.json ./apps/web/
COPY packages/ ./packages/
RUN bun install --frozen-lockfile

FROM base_image AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages ./packages
COPY . .
RUN bunx turbo build --filter=web

FROM base_image AS production
WORKDIR /app
RUN apk add --no-cache curl
ARG USER_ID=1000
ARG GROUP_ID=9999
# Simplified user/group creation for production
RUN addgroup -S -g ${GROUP_ID} nodejs 2>/dev/null || echo "Group nodejs or GID ${GROUP_ID} issue, continuing..." && \
    adduser -S -u ${USER_ID} -G nodejs nextjs 2>/dev/null || echo "User nextjs or UID ${USER_ID} issue, continuing..."
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next ./apps/web/.next
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/package.json ./apps/web/
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
USER nextjs
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1
CMD ["bun", "run", "apps/web/server.js"]

# Development stage
FROM base_image AS development
WORKDIR /app
RUN apk add --no-cache curl
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages ./packages
COPY . .
# Run as root for development simplicity
EXPOSE 3000
ENV PORT=3000
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1
CMD ["bunx", "turbo", "run", "dev", "--filter=web"]

======= End of ./apps/web/Dockerfile =======

======= Start of ./apps/server/Dockerfile =======
FROM oven/bun:1.1.38-alpine AS base_image
# Install dependencies only when needed
FROM base_image AS deps
WORKDIR /app
COPY package.json bun.lock ./
COPY turbo.json ./
COPY apps/server/package.json ./apps/server/
COPY packages/ ./packages/
RUN bun install --frozen-lockfile

# Development stage
FROM base_image AS development
WORKDIR /app
RUN apk add --no-cache curl
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Run as root for development simplicity
EXPOSE 4000
ENV PORT=4000
ENV NODE_ENV=development
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:4000/health || exit 1
CMD ["bunx", "turbo", "run", "dev", "--filter=server"]

# Build stage
FROM base_image AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN bunx turbo build --filter=server

# Production stage (keeping user creation for now, but you can simplify this too if needed)
FROM base_image AS production
WORKDIR /app
RUN apk add --no-cache curl
ARG USER_ID=1000
ARG GROUP_ID=9999
# Simplified user/group creation for production
RUN addgroup -S -g ${GROUP_ID} nodejs 2>/dev/null || echo "Group nodejs or GID ${GROUP_ID} issue, continuing..." && \
    adduser -S -u ${USER_ID} -G nodejs serveruser 2>/dev/null || echo "User serveruser or UID ${USER_ID} issue, continuing..."
COPY --from=builder --chown=serveruser:nodejs /app/apps/server/dist ./apps/server/dist
COPY --from=builder --chown=serveruser:nodejs /app/packages ./packages
COPY --from=builder --chown=serveruser:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=serveruser:nodejs /app/apps/server/package.json ./apps/server/
USER serveruser
EXPOSE 4000
ENV PORT=4000
ENV NODE_ENV=production
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:4000/health || exit 1
CMD ["bun", "run", "apps/server/dist/index.js"]

======= End of ./apps/server/Dockerfile =======

======= Start of ./apps/docs/Dockerfile =======
FROM oven/bun:1.1.38-alpine AS base_image
FROM base_image AS deps
WORKDIR /app
COPY package.json bun.lock ./
COPY turbo.json ./
COPY apps/docs/package.json ./apps/docs/
COPY packages/ ./packages/
RUN bun install --frozen-lockfile

FROM base_image AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/docs/node_modules ./apps/docs/node_modules
COPY . .
RUN bunx turbo build --filter=docs

FROM base_image AS production
WORKDIR /app
RUN apk add --no-cache curl
ARG USER_ID=1000
ARG GROUP_ID=9999
# Simplified user/group creation for production
RUN addgroup -S -g ${GROUP_ID} nodejs 2>/dev/null || echo "Group nodejs or GID ${GROUP_ID} issue, continuing..." && \
    adduser -S -u ${USER_ID} -G nodejs nextjs 2>/dev/null || echo "User nextjs or UID ${USER_ID} issue, continuing..."
COPY --from=builder --chown=nextjs:nodejs /app/apps/docs/.next ./apps/docs/.next
COPY --from=builder --chown=nextjs:nodejs /app/apps/docs/public ./apps/docs/public
COPY --from=builder --chown=nextjs:nodejs /app/apps/docs/package.json ./apps/docs/
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
USER nextjs
EXPOSE 3001
ENV PORT=3001
ENV HOSTNAME="0.0.0.0"
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1
CMD ["bun", "run", "apps/docs/server.js"]

# Development stage
FROM base_image AS development
WORKDIR /app
RUN apk add --no-cache curl
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Run as root for development simplicity
EXPOSE 3001
ENV PORT=3001
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3001 || exit 1
CMD ["bunx", "turbo", "run", "dev", "--filter=docs"]

======= End of ./apps/docs/Dockerfile =======

